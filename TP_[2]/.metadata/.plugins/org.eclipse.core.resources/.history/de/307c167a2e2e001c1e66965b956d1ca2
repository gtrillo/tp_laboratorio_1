#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "employee.h"
#include "utn_pedirCadena.h"

#define LEN_ARRAY 51
#define ESTADO_LIBRE 1
#define ESTADO_OCUPADO 0

static int elegirOpcion (int* opcion);
static void imprimirOpciones (void);
static int modificarSector (int* pArray);
static int modificarSalario (float* pArray);
static int modificarNombre (char array[]);
static int modificarApellido (char array[]);
static int DameUnIdNuevo(void);
static int contadorDeEmpleados (Employee array [], int len, int *resultado);

/**
 *\brief funsion para inicializar array
 *\param puntero a la dirrecion de memoria donde se aloja el array
 *\param largo del array
 *\retorna 0 en el caso de que este todo bien y -1 en caso de error
 */
int empleado_inicializarArray(Employee aEmpleados[],int lenArray)
{
	int retorno;
	int i;

	if (aEmpleados != NULL && lenArray > 0)
	{
		for (i = 0; i < lenArray; i++)
		{
			aEmpleados[i].flagEmpty = ESTADO_LIBRE;
			retorno = 0;
		}
	}
	else
	{
		retorno = -1;
	}
	return retorno;
}

int loadEmpleado (Employee* pEmpleado)
{
	int retorno;
	int sectorAux;
	float salaryAux;
	char nameAux [51];
	char lastNameAux [51];

	if (pEmpleado != NULL)
	{
		if (utn_getText(nameAux, 51, "Ingrese nombre del empleado:\n", "Error de tipeo, Intente nuevamente:\n", 5)==0)
		{
			if (utn_getText(lastNameAux, 51, "Ingrese Apellido:\n", "Error de tipeo, Intente nuevamente:\n", 5)==0)
				{
					if (utn_getNumeroFloat(&salaryAux, "Ingrese salario:\n", "Error de tipeo, El salario solo puede contener numeros", 1, 1000000000, 5)==0)
					{
						if (utn_getNumeroInt(&sectorAux, "Seleccione sector:\n", "sector invalido.", 1, 10, 5)==0)
						{
							strncpy(pEmpleado->name, nameAux, sizeof (pEmpleado->name));
							strncpy(pEmpleado->lastName, lastNameAux, sizeof (pEmpleado->lastName));
							pEmpleado->salary = salaryAux;
							pEmpleado->sector = sectorAux;
							pEmpleado->id = DameUnIdNuevo();
							pEmpleado ->flagEmpty = ESTADO_OCUPADO;
							retorno = 0;
						}
					}
				}
		}
	}
	return retorno;
}

static int DameUnIdNuevo(void)
{
	static int contador = 0;

	return contador++;
}

int DameUnLugarLibre (Employee pEmpleado[], int lenArray, int* retornoPosicionLibre)
{
	int retorno;
	int indice;
	int auxLugarLibre;
	if (pEmpleado != NULL)
	{
		for (indice = 0; indice < lenArray; indice++)
		{
			if (pEmpleado[indice].flagEmpty == 1)
			{
				auxLugarLibre = indice;
				retorno = 0;
				break;
			}
		}
	}
	*retornoPosicionLibre = auxLugarLibre;
	return retorno;
}

int BuscarPorId (Employee aEmpleados[], int indiceIngresado, int lenArray)
{
	int retorno = -1;
	int indice;

	if (aEmpleados != NULL && indiceIngresado >=0 && lenArray >= 0)
	{
		for (indice = 0; indice < lenArray; indice++)
		{
			if (indiceIngresado == aEmpleados[indice].id && aEmpleados[indice].flagEmpty == ESTADO_OCUPADO)
			{
				retorno = indice;
				break;
			}
		}
	}
	return retorno;
}

int darDeBaja (Employee aEmpleados[], int indiceIngresado, int lenArray)
{
		int retorno = -1;
		int indice;

		for (indice = 0; indice < lenArray; indice++)
		{
			if (indiceIngresado == aEmpleados[indice].id && aEmpleados[indice].flagEmpty == ESTADO_OCUPADO)
			{
				aEmpleados[indice].flagEmpty = ESTADO_LIBRE;
				retorno = 0;
				break;
			}

		}
		return retorno;
}

int imprimirEmpleados (Employee aEmpleados[], int lenArray)
{
	int indice;
	int retorno = -1;
	if (aEmpleados != NULL && lenArray >= 0)
	{
	for (indice = 0; indice < lenArray; indice++)
	{
		if (aEmpleados[indice].flagEmpty == ESTADO_OCUPADO)
		{
			printf ("\nID: %d - NOMBRE: %s - APELLIDO: %s - SALARIO: $%.2f - SECTOR: %d", aEmpleados[indice].id, aEmpleados[indice].name, aEmpleados[indice].lastName, aEmpleados[indice].salary, aEmpleados[indice].sector);
			retorno = 0;
		}
	}
	}
	return retorno;
}

int modificarEmpleado(Employee* aEmpleados)
{
	int IDaModificar;
	int retorno = -1;
	int auxSector;
	float auxSalary;
	char auxName[51];
	char auxLastName[51];

	if (aEmpleados != NULL)
	{
		if (elegirOpcion(&IDaModificar) == 0)
		{
			retorno = 1;
			switch (IDaModificar)
			{
				case 1:
					if (modificarSector(&auxSector) == 0)
					{
						aEmpleados->sector = auxSector;
					}
					break;
				case 2:
					if (modificarSalario(&auxSalary) == 0)
					{
						aEmpleados->salary = auxSalary;
					}
					break;
				case 3:
					if (modificarNombre(auxName) == 0)
					{
						strncpy(aEmpleados->name, auxName, LEN_ARRAY);
					}
					break;
				case 4:
					if (modificarApellido(auxLastName) == 0)
					{
						strncpy(aEmpleados->lastName, auxLastName, LEN_ARRAY);
					}
			}
		}
	}
	return retorno;
}

static int elegirOpcion (int* opcion)
{
	int retorno = -1;
	int auxOpcion;

	imprimirOpciones();
	if (utn_getNumeroInt(&auxOpcion,"\nUtilice el teclado numerico para seleccionar una opcion:\n","Error",1,4,2) == 0)
	{
		retorno = 0;
		*opcion = auxOpcion;
	}
	return retorno;
}

static void imprimirOpciones (void)
{
	printf ("\n¿Que campo desea modificar?");
	printf("\n1. Sector");
	printf("\n2. Salario");
	printf("\n3. Nombre del empleado");
	printf("\n4. Apellido del empleado");
}

static int modificarSector (int* pArray)
{
	int retorno = -1;
	char mensaje[100];
	int auxSector;
	strncpy(mensaje, "\nIngrese el sector:",sizeof(mensaje));
	if (utn_getNumeroInt(&auxSector,mensaje,"Error",1,100,2) == 0)
	{
		retorno = 0;
		*pArray = auxSector;
	}
	return retorno;
}

static int modificarSalario (float* pArray)
{
	int retorno = -1;
	char mensaje[100];
	float auxSalario;
	strncpy(mensaje, "\nIngrese salario",sizeof(mensaje));
	if (utn_getNumeroFloat(&auxSalario, mensaje, "Error", 0, 10000, 2)== 0)
	{
		retorno = 0;
		*pArray = auxSalario;
	}
	return retorno;
}

static int modificarNombre (char array[])
{
	int retorno = -1;
	char mensaje[100];
	char auxName[LEN_ARRAY];
	strncpy(mensaje, "\nIngrese el nombre",sizeof(mensaje));
	if (utn_getText(auxName, LEN_ARRAY, mensaje, "Error",2) == 0)
	{
		retorno = 0;
		strncpy(array, auxName, LEN_ARRAY);
	}
	return retorno;
}

static int modificarApellido (char array[])
{
	int retorno = -1;
	char mensaje[100];
	char auxApellido[LEN_ARRAY];
	strncpy(mensaje, "\nIngrese apellido",sizeof(mensaje));
	if (utn_getText(auxApellido, LEN_ARRAY, mensaje, "Error",2) == 0)
	{
		retorno = 0;
		strncpy(array, auxApellido,LEN_ARRAY);
	}
	return retorno;
}

int promedioSalario (Employee array [], int len, float *resultado, float *retornoAcumSalario)
{
	float acumSalario = 0;
	int i;
	float promedio;
	int retornoContador;
	int retorno = -1;

	if (contadorDeEmpleados(array, len, &retornoContador)==0)
	{
		for (i = 0; i < len; i++)
			{
				if (array[i].flagEmpty == ESTADO_OCUPADO)
				{
				acumSalario = acumSalario + array [i].salary;
				*retornoAcumSalario = acumSalario;
				}
				}
			promedio = (float)acumSalario / retornoContador;
			*resultado = promedio;
			retorno = 0;
	}
	return retorno;
}

static int contadorDeEmpleados (Employee array [], int len, int *resultado)
{
	int retorno = -1;
	int contador = 0;
	int indice;

	for (indice = 0; indice < len; indice++)
	{
		if (array[indice].flagEmpty == ESTADO_OCUPADO)
		{
			contador++;
			retorno = 0;
		}
	}
	*resultado = contador;
	return retorno;
}
